---
import "@/styles/global.css";
import PageLayout from "@/layouts/page-layout.astro";

// Define the news items
const newsItems = [
  {
    id: 1,
    displayDate: "2024-02-28",
    title: "Idea Hackthon Winners",
    description: "",
    image: "../../src/assets/news/Ideahackathon winners.jpg",
    category: "Hackthon",
    size: "large"
  },
  {
    id: 2,
    displayDate: "2024-02-18",
    title: "condolance",
    description: "",
    image: "../../src/assets/news/condolence.jpg",
    category: "Academics",
    size: "medium"
  },
  
];

// Sort news items by date
const sortedNews = [...newsItems].sort((a, b) => new Date(b.displayDate) - new Date(a.displayDate));

// Get unique categories
const categories = ['All', ...Array.from(new Set(newsItems.map(item => item.category)))];

// Function to distribute news items to columns for masonry layout
const distributeToColumns = (items, columnCount = 3) => {
  // Initialize columns
  const columns = Array.from({ length: columnCount }, () => []);
  
  // Distribute items considering their size/weight
  items.forEach((item) => {
    // Calculate weight for each column
    const columnWeights = columns.map(col => 
      col.reduce((sum, colItem) => {
        if (colItem.size === 'large') return sum + 3;
        if (colItem.size === 'medium') return sum + 2;
        return sum + 1;
      }, 0)
    );
    
    // Find the column with the least weight
    const targetColumnIndex = columnWeights.indexOf(Math.min(...columnWeights));
    columns[targetColumnIndex].push(item);
  });
  
  return columns;
};

// Distribute news to columns
const newsColumns = distributeToColumns(sortedNews, 3);

// Function to format date
const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric'
  });
};

// Function to get category color
const getCategoryColor = (category) => {
  const colorMap = {
    'Sports': 'bg-blue-500',
    'Academics': 'bg-green-500',
    'Events': 'bg-purple-500',
    'Infrastructure': 'bg-yellow-500',
    'Faculty': 'bg-pink-500',
    'Research': 'bg-red-500',
    'Career': 'bg-indigo-500',
    'Partnerships': 'bg-teal-500'
  };
  
  return colorMap[category] || 'bg-gray-500';
};

// Function to get height class based on size
const getCardHeight = (size) => {
  switch(size) {
    case 'large': return 'min-h-[400px]';
    case 'medium': return 'min-h-[320px]';
    default: return 'min-h-[280px]';
  }
};

// Function to get image height based on size
const getImageHeight = (size) => {
  switch(size) {
    case 'large': return 'h-64';
    case 'medium': return 'h-48';
    default: return 'h-40';
  }
};
---

<PageLayout title="News | Department of Electronics and Communication Engineering | GEC PKD">
  <main class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8 bg-gray-50">
    <!-- Header -->
    <div class="mb-12 text-center">
      <h1 class="text-4xl font-bold mb-4 text-gray-900">Department News</h1>
      <div class="w-24 h-1 bg-indigo-600 mx-auto mb-6"></div>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Latest updates and highlights from the Department of Electronics and Communication Engineering
      </p>
    </div>

    <!-- Category filter -->
    <div class="mb-10 flex flex-wrap justify-center gap-2">
      {categories.map((category) => (
        <button
          class="px-4 py-2 rounded-lg text-sm font-medium transition-all bg-white text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
          data-category={category}
        >
          {category}
        </button>
      ))}
    </div>

    <!-- Masonry layout -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {newsColumns.map((column, columnIndex) => (
        <div class={`flex flex-col gap-6 ${columnIndex === 1 ? 'md:mt-12' : columnIndex === 2 ? 'md:mt-24' : ''}`}>
          {column.map((news) => (
            <article 
              class={`group bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden ${getCardHeight(news.size)}`}
            >
              <div class={`relative w-full overflow-hidden ${getImageHeight(news.size)}`}>
                <img
                  src={news.image}
                  alt={news.title}
                  class="w-full h-full object-cover transition duration-500 group-hover:scale-105"
                />
                <div class={`absolute top-4 left-4 ${getCategoryColor(news.category)} text-white px-3 py-1 rounded-full text-xs font-semibold flex items-center`}>
                  <!-- Tag icon (using inline SVG for Astro compatibility) -->
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5a1.99 1.99 0 0 1 1.414.586l7 7a2 2 0 0 1 0 2.828l-7 7a2 2 0 0 1-2.828 0l-7-7A1.994 1.994 0 0 1 3 12V7a4 4 0 0 1 4-4z" />
                  </svg>
                  {news.category}
                </div>
              </div>
              
              <div class="p-5 flex flex-col h-full">
                <div class="flex items-center text-gray-500 mb-3">
                  <!-- Calendar icon (using inline SVG for Astro compatibility) -->
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2z" />
                  </svg>
                  <span class="text-xs">{formatDate(news.displayDate)}</span>
                </div>
                
                <h2 class={`font-bold mb-3 transition-colors group-hover:text-indigo-600 ${
                  news.size === 'large' ? 'text-xl' : 'text-lg'
                }`}>
                  {news.title}
                </h2>
                
                <p class="text-gray-600 text-sm line-clamp-3 mb-4 flex-grow">
                  {news.description}
                </p>
                
                <a href={`/news/${news.id}`} class="text-indigo-600 font-medium text-sm hover:text-indigo-800 transition-colors mt-auto inline-flex items-center">
                  Read full story
                  <!-- Arrow icon (using inline SVG for Astro compatibility) -->
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </a>
              </div>
            </article>
          ))}
        </div>
      ))}
    </div>

    <!-- Pagination -->
    <div class="mt-12 flex justify-center items-center gap-4">
      <button class="w-10 h-10 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors">
        <span class="sr-only">Previous page</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <span class="text-sm text-gray-700">Page 1 of 1</span>
      <button class="w-10 h-10 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors">
        <span class="sr-only">Next page</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </main>
</PageLayout>

<script>
  // Client-side JavaScript for category filtering
  document.addEventListener('DOMContentLoaded', () => {
    const categoryButtons = document.querySelectorAll('[data-category]');
    const newsArticles = document.querySelectorAll('article');
    
    // Add click event to category buttons
    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        categoryButtons.forEach(btn => {
          btn.classList.remove('bg-gray-900', 'text-white');
          btn.classList.add('bg-white', 'text-gray-800');
        });
        
        // Add active class to clicked button
        button.classList.remove('bg-white', 'text-gray-800');
        button.classList.add('bg-gray-900', 'text-white');
        
        const selectedCategory = button.getAttribute('data-category');
        
        // If 'All' is selected, show all news items
        if (selectedCategory === 'All') {
          newsArticles.forEach(article => {
            article.style.display = 'block';
          });
          return;
        }
        
        // Otherwise filter by category
        newsArticles.forEach(article => {
          const articleCategory = article.querySelector('[class*="bg-"]').textContent.trim();
          if (articleCategory === selectedCategory) {
            article.style.display = 'block';
          } else {
            article.style.display = 'none';
          }
        });
      });
    });
  });
</script>